import { z } from "zod";
export declare const users: import("drizzle-orm/pg-core").PgTableWithColumns<{
    name: "users";
    schema: undefined;
    columns: {
        id: import("drizzle-orm/pg-core").PgColumn<{
            name: "id";
            tableName: "users";
            dataType: "number";
            columnType: "PgSerial";
            data: number;
            driverParam: number;
            notNull: true;
            hasDefault: true;
            isPrimaryKey: true;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        username: import("drizzle-orm/pg-core").PgColumn<{
            name: "username";
            tableName: "users";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        email: import("drizzle-orm/pg-core").PgColumn<{
            name: "email";
            tableName: "users";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        password: import("drizzle-orm/pg-core").PgColumn<{
            name: "password";
            tableName: "users";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        githubId: import("drizzle-orm/pg-core").PgColumn<{
            name: "github_id";
            tableName: "users";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        githubUsername: import("drizzle-orm/pg-core").PgColumn<{
            name: "github_username";
            tableName: "users";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        githubAvatar: import("drizzle-orm/pg-core").PgColumn<{
            name: "github_avatar";
            tableName: "users";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        customProfilePicture: import("drizzle-orm/pg-core").PgColumn<{
            name: "custom_profile_picture";
            tableName: "users";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        githubBio: import("drizzle-orm/pg-core").PgColumn<{
            name: "github_bio";
            tableName: "users";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        fid: import("drizzle-orm/pg-core").PgColumn<{
            name: "fid";
            tableName: "users";
            dataType: "number";
            columnType: "PgInteger";
            data: number;
            driverParam: string | number;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        farcasterUsername: import("drizzle-orm/pg-core").PgColumn<{
            name: "farcaster_username";
            tableName: "users";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        farcasterAvatar: import("drizzle-orm/pg-core").PgColumn<{
            name: "farcaster_avatar";
            tableName: "users";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        score: import("drizzle-orm/pg-core").PgColumn<{
            name: "score";
            tableName: "users";
            dataType: "number";
            columnType: "PgInteger";
            data: number;
            driverParam: string | number;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        solanaAddress: import("drizzle-orm/pg-core").PgColumn<{
            name: "solana_address";
            tableName: "users";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        ethereumAddress: import("drizzle-orm/pg-core").PgColumn<{
            name: "ethereum_address";
            tableName: "users";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        ethereumSplitAddress: import("drizzle-orm/pg-core").PgColumn<{
            name: "ethereum_split_address";
            tableName: "users";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        ethereumSplitDeploymentStatus: import("drizzle-orm/pg-core").PgColumn<{
            name: "ethereum_split_deployment_status";
            tableName: "users";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        ethereumSplitDeploymentTimestamp: import("drizzle-orm/pg-core").PgColumn<{
            name: "ethereum_split_deployment_timestamp";
            tableName: "users";
            dataType: "date";
            columnType: "PgTimestamp";
            data: Date;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        bitcoinLightningAddress: import("drizzle-orm/pg-core").PgColumn<{
            name: "bitcoin_lightning_address";
            tableName: "users";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        isAdmin: import("drizzle-orm/pg-core").PgColumn<{
            name: "is_admin";
            tableName: "users";
            dataType: "boolean";
            columnType: "PgBoolean";
            data: boolean;
            driverParam: boolean;
            notNull: false;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        createdAt: import("drizzle-orm/pg-core").PgColumn<{
            name: "created_at";
            tableName: "users";
            dataType: "date";
            columnType: "PgTimestamp";
            data: Date;
            driverParam: string;
            notNull: false;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
    };
    dialect: "pg";
}>;
export declare const tips: import("drizzle-orm/pg-core").PgTableWithColumns<{
    name: "tips";
    schema: undefined;
    columns: {
        id: import("drizzle-orm/pg-core").PgColumn<{
            name: "id";
            tableName: "tips";
            dataType: "number";
            columnType: "PgSerial";
            data: number;
            driverParam: number;
            notNull: true;
            hasDefault: true;
            isPrimaryKey: true;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        userId: import("drizzle-orm/pg-core").PgColumn<{
            name: "user_id";
            tableName: "tips";
            dataType: "number";
            columnType: "PgInteger";
            data: number;
            driverParam: string | number;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        amount: import("drizzle-orm/pg-core").PgColumn<{
            name: "amount";
            tableName: "tips";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        platformFee: import("drizzle-orm/pg-core").PgColumn<{
            name: "platform_fee";
            tableName: "tips";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        platformFeePercentage: import("drizzle-orm/pg-core").PgColumn<{
            name: "platform_fee_percentage";
            tableName: "tips";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        message: import("drizzle-orm/pg-core").PgColumn<{
            name: "message";
            tableName: "tips";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        senderName: import("drizzle-orm/pg-core").PgColumn<{
            name: "sender_name";
            tableName: "tips";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        senderAvatar: import("drizzle-orm/pg-core").PgColumn<{
            name: "sender_avatar";
            tableName: "tips";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        blockchain: import("drizzle-orm/pg-core").PgColumn<{
            name: "blockchain";
            tableName: "tips";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: true;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        token: import("drizzle-orm/pg-core").PgColumn<{
            name: "token";
            tableName: "tips";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        transactionHash: import("drizzle-orm/pg-core").PgColumn<{
            name: "transaction_hash";
            tableName: "tips";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        usdValue: import("drizzle-orm/pg-core").PgColumn<{
            name: "usd_value";
            tableName: "tips";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        status: import("drizzle-orm/pg-core").PgColumn<{
            name: "status";
            tableName: "tips";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        appId: import("drizzle-orm/pg-core").PgColumn<{
            name: "app_id";
            tableName: "tips";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        appName: import("drizzle-orm/pg-core").PgColumn<{
            name: "app_name";
            tableName: "tips";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        appIconUrl: import("drizzle-orm/pg-core").PgColumn<{
            name: "app_icon_url";
            tableName: "tips";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        recipientType: import("drizzle-orm/pg-core").PgColumn<{
            name: "recipient_type";
            tableName: "tips";
            dataType: "string";
            columnType: "PgText";
            data: string;
            driverParam: string;
            notNull: false;
            hasDefault: false;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: [string, ...string[]];
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
        createdAt: import("drizzle-orm/pg-core").PgColumn<{
            name: "created_at";
            tableName: "tips";
            dataType: "date";
            columnType: "PgTimestamp";
            data: Date;
            driverParam: string;
            notNull: false;
            hasDefault: true;
            isPrimaryKey: false;
            isAutoincrement: false;
            hasRuntimeDefault: false;
            enumValues: undefined;
            baseColumn: never;
            identity: undefined;
            generated: undefined;
        }, {}, {}>;
    };
    dialect: "pg";
}>;
export declare const insertUserSchema: z.ZodObject<Omit<{
    id: z.ZodOptional<z.ZodNumber>;
    username: z.ZodString;
    email: z.ZodString;
    password: z.ZodString;
    githubId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    githubUsername: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    githubAvatar: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    customProfilePicture: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    githubBio: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    fid: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    farcasterUsername: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    farcasterAvatar: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    score: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    solanaAddress: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    ethereumAddress: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    ethereumSplitAddress: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    ethereumSplitDeploymentStatus: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    ethereumSplitDeploymentTimestamp: z.ZodOptional<z.ZodNullable<z.ZodDate>>;
    bitcoinLightningAddress: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    isAdmin: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    createdAt: z.ZodOptional<z.ZodNullable<z.ZodDate>>;
}, "id" | "createdAt">, "strip", z.ZodTypeAny, {
    username: string;
    email: string;
    password: string;
    githubId?: string | null | undefined;
    githubUsername?: string | null | undefined;
    githubAvatar?: string | null | undefined;
    customProfilePicture?: string | null | undefined;
    githubBio?: string | null | undefined;
    fid?: number | null | undefined;
    farcasterUsername?: string | null | undefined;
    farcasterAvatar?: string | null | undefined;
    score?: number | null | undefined;
    solanaAddress?: string | null | undefined;
    ethereumAddress?: string | null | undefined;
    ethereumSplitAddress?: string | null | undefined;
    ethereumSplitDeploymentStatus?: string | null | undefined;
    ethereumSplitDeploymentTimestamp?: Date | null | undefined;
    bitcoinLightningAddress?: string | null | undefined;
    isAdmin?: boolean | null | undefined;
}, {
    username: string;
    email: string;
    password: string;
    githubId?: string | null | undefined;
    githubUsername?: string | null | undefined;
    githubAvatar?: string | null | undefined;
    customProfilePicture?: string | null | undefined;
    githubBio?: string | null | undefined;
    fid?: number | null | undefined;
    farcasterUsername?: string | null | undefined;
    farcasterAvatar?: string | null | undefined;
    score?: number | null | undefined;
    solanaAddress?: string | null | undefined;
    ethereumAddress?: string | null | undefined;
    ethereumSplitAddress?: string | null | undefined;
    ethereumSplitDeploymentStatus?: string | null | undefined;
    ethereumSplitDeploymentTimestamp?: Date | null | undefined;
    bitcoinLightningAddress?: string | null | undefined;
    isAdmin?: boolean | null | undefined;
}>;
export declare const insertTipSchema: z.ZodObject<Omit<{
    id: z.ZodOptional<z.ZodNumber>;
    userId: z.ZodNumber;
    amount: z.ZodString;
    platformFee: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    platformFeePercentage: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    message: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    senderName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    senderAvatar: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    blockchain: z.ZodString;
    token: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    transactionHash: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    usdValue: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    status: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    appId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    appName: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    appIconUrl: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    recipientType: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    createdAt: z.ZodOptional<z.ZodNullable<z.ZodDate>>;
}, "id" | "createdAt">, "strip", z.ZodTypeAny, {
    userId: number;
    amount: string;
    blockchain: string;
    status?: string | null | undefined;
    message?: string | null | undefined;
    senderName?: string | null | undefined;
    platformFee?: string | null | undefined;
    platformFeePercentage?: string | null | undefined;
    senderAvatar?: string | null | undefined;
    token?: string | null | undefined;
    transactionHash?: string | null | undefined;
    usdValue?: string | null | undefined;
    appId?: string | null | undefined;
    appName?: string | null | undefined;
    appIconUrl?: string | null | undefined;
    recipientType?: string | null | undefined;
}, {
    userId: number;
    amount: string;
    blockchain: string;
    status?: string | null | undefined;
    message?: string | null | undefined;
    senderName?: string | null | undefined;
    platformFee?: string | null | undefined;
    platformFeePercentage?: string | null | undefined;
    senderAvatar?: string | null | undefined;
    token?: string | null | undefined;
    transactionHash?: string | null | undefined;
    usdValue?: string | null | undefined;
    appId?: string | null | undefined;
    appName?: string | null | undefined;
    appIconUrl?: string | null | undefined;
    recipientType?: string | null | undefined;
}>;
export declare const loginSchema: z.ZodObject<{
    email: z.ZodString;
    password: z.ZodString;
}, "strip", z.ZodTypeAny, {
    email: string;
    password: string;
}, {
    email: string;
    password: string;
}>;
export declare const registerSchema: z.ZodObject<{
    email: z.ZodString;
    password: z.ZodString;
} & {
    username: z.ZodString;
}, "strip", z.ZodTypeAny, {
    username: string;
    email: string;
    password: string;
}, {
    username: string;
    email: string;
    password: string;
}>;
export declare const githubAuthSchema: z.ZodObject<{
    code: z.ZodString;
}, "strip", z.ZodTypeAny, {
    code: string;
}, {
    code: string;
}>;
export type InsertUser = z.infer<typeof insertUserSchema>;
export type User = typeof users.$inferSelect;
export type InsertTip = z.infer<typeof insertTipSchema>;
export type Tip = typeof tips.$inferSelect;
export type LoginData = z.infer<typeof loginSchema>;
export type RegisterData = z.infer<typeof registerSchema>;
export type GitHubAuthData = z.infer<typeof githubAuthSchema>;
export type Blockchain = {
    id: string;
    name: string;
    icon: string;
    svgContent?: string;
    description: string;
    currency: string;
};
export declare const blockchainSettingsSchema: z.ZodObject<{
    blockchain: z.ZodEnum<["ethereum", "solana", "bitcoin"]>;
    feePercentage: z.ZodNumber;
    platformWallet: z.ZodOptional<z.ZodString>;
    contractAddress: z.ZodOptional<z.ZodString>;
    programId: z.ZodOptional<z.ZodString>;
    networkMode: z.ZodDefault<z.ZodEnum<["testnet", "mainnet"]>>;
}, "strip", z.ZodTypeAny, {
    blockchain: "ethereum" | "solana" | "bitcoin";
    feePercentage: number;
    networkMode: "testnet" | "mainnet";
    contractAddress?: string | undefined;
    platformWallet?: string | undefined;
    programId?: string | undefined;
}, {
    blockchain: "ethereum" | "solana" | "bitcoin";
    feePercentage: number;
    contractAddress?: string | undefined;
    platformWallet?: string | undefined;
    programId?: string | undefined;
    networkMode?: "testnet" | "mainnet" | undefined;
}>;
export type BlockchainSettings = z.infer<typeof blockchainSettingsSchema>;
//# sourceMappingURL=schema.d.ts.map