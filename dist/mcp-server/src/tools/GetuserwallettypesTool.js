// @ts-ignore These modules are loaded at runtime
import { MCPTool } from "mcp-framework";
import { z } from "zod";
// @ts-ignore
import { userRepository } from '../../database/userRepository.js'; // Omitted extension, using directory import
// Local logger for this tool
const toolLogger = {
    info: (...args) => console.log('[GetUserWalletTypesTool]', ...args),
    error: (...args) => console.error('[GetUserWalletTypesTool ERROR]', ...args),
    warn: (...args) => console.warn('[GetUserWalletTypesTool WARN]', ...args),
    debug: (...args) => console.debug('[GetUserWalletTypesTool DEBUG]', ...args)
};
// Define the Zod schema for the actual parameters for type inference
const UserWalletTypesParamsZodSchema = z.object({
    username: z.string().min(3).max(50).regex(/^[a-zA-Z0-9_-]+$/, 'Username must contain only alphanumeric characters, underscores, and hyphens')
});
/**
 * Extract wallet types from a user object
 * @param user User object
 * @returns Array of wallet types (blockchain names)
 */
const extractWalletTypes = (user) => {
    const walletTypes = [];
    if (user.solanaAddress && user.solanaAddress.trim() !== '') {
        walletTypes.push('solana');
    }
    if (user.ethereumAddress && user.ethereumAddress.trim() !== '') {
        walletTypes.push('ethereum');
    }
    if (user.bitcoinLightningAddress && user.bitcoinLightningAddress.trim() !== '') {
        walletTypes.push('bitcoinLightning');
    }
    if (user.wallets && Object.keys(user.wallets).length > 0) {
        Object.keys(user.wallets).forEach(type => {
            if (!walletTypes.includes(type)) {
                walletTypes.push(type);
            }
        });
    }
    return walletTypes;
};
// Keeping class name GetuserwallettypesTool to match filename generated by CLI
export default class GetuserwallettypesTool extends MCPTool {
    name = "get_user_wallet_types"; // Actual tool name for clients
    description = "Retrieves a tip.md user's configured wallet types from the database.";
    // Schema definition as expected by MCPTool (based on ExampleTool)
    schema = {
        username: {
            type: z.string().min(3).max(50).regex(/^[a-zA-Z0-9_-]+$/, 'Username must contain only alphanumeric characters, underscores, and hyphens'),
            description: 'The username for which to retrieve wallet types.'
        }
    };
    constructor() { super(); }
    async execute(input) {
        const { username } = input;
        toolLogger.info(`Executing ${this.name} for user: ${username}`);
        try {
            const user = await userRepository.getUserByUsername(username);
            if (!user) {
                toolLogger.warn(`User not found: ${username}`);
                // Instead of throwing an error, return a structured response that will guide the LLM
                return {
                    userNotFound: true,
                    username,
                    suggestSignup: true,
                    signupUrl: 'https://www.tip.md/auth'
                };
            }
            const walletTypes = extractWalletTypes(user);
            // Check if the user has no configured wallets
            if (walletTypes.length === 0) {
                toolLogger.warn(`User ${username} has no configured wallets`);
                return {
                    noWalletsConfigured: true,
                    username,
                    suggestSetup: true,
                    dashboardUrl: 'https://www.tip.md/dashboard'
                };
            }
            toolLogger.info(`Found ${walletTypes.length} wallet types for user: ${username}`);
            return walletTypes;
        }
        catch (error) {
            toolLogger.error(`Error in ${this.name} for user ${username}:`, error.message);
            if (error instanceof Error) {
                throw error;
            }
            throw new Error(`Failed to get wallet types for ${username}: ${error.message || String(error)}`);
        }
    }
}
